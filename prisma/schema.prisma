generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  namaLengkap  String
  role         Role

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  siswaProfile SiswaProfile?
  guruProfile  GuruProfile?
}

model SiswaProfile {
  id              String            @id @unique
  userId          String            @unique
  nis             String?           @unique

  kelasId         String?
  kelompokId      String?

  tanggalLahir    DateTime?
  tempatLahir     String?
  jenisKelamin    JenisKelamin?
  golonganDarah   GolonganDarah?
  alamat          String?
  noTelp          String?
  email           String?
  fotoProfil      String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt


  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelas           Kelas?            @relation(fields: [kelasId], references: [id])
  riwayatKelas    RiwayatKelas[]
  kelompok        Kelompok?         @relation(fields: [kelompokId], references: [id])
  riwayatKelompok RiwayatKelompok[]
  setoran         Setoran[]

  @@index([nis])
}

model GuruProfile {
  id              String            @id @unique
  userId          String            @unique
  nip             String?           @unique

  tanggalLahir    DateTime?
  tempatLahir     String?
  jenisKelamin    JenisKelamin?
  golonganDarah   GolonganDarah?
  alamat          String?
  noTelp          String?
  email           String?
  fotoProfil      String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  guruKelompok    GuruKelompok[]
  riwayatKelompok RiwayatKelompok[]
  setoran         Setoran[]
}

model Kelas {
  id            String         @id @unique
  namaKelas     String
  tahunAjaran   String
  kelompok      Kelompok[]
  riwayatKelas  RiwayatKelas[]
  siswaProfiles SiswaProfile[]

  @@unique([namaKelas, tahunAjaran])
}

model RiwayatKelas {
  id            String       @id @default(uuid())
  siswaId       String
  kelasId       String
  tahunAjaran   String
  tanggalPindah DateTime     @default(now())
  kelas         Kelas        @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  siswa         SiswaProfile @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

model GuruKelompok {
  id         String      @id @default(uuid())
  guruId     String
  kelompokId String

  createdAt  DateTime    @default(now())
  
  guru       GuruProfile @relation(fields: [guruId], references: [id], onDelete: Cascade)
  kelompok   Kelompok    @relation(fields: [kelompokId], references: [id], onDelete: Cascade)
}

model Kelompok {
  id              String            @id @unique
  namaKelompok    String
  kelasId         String
  tahunAjaran     String

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  riwayatKelompok RiwayatKelompok[]
  guruKelompok    GuruKelompok[]
  kelas           Kelas             @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  siswaProfiles   SiswaProfile[]

  @@unique([namaKelompok, kelasId, tahunAjaran])
}

model RiwayatKelompok {
  id            String       @id @default(uuid())
  siswaId       String
  kelompokId    String
  guruId        String?
  tahunAjaran   String
  tanggalGabung DateTime     @default(now())
  guru          GuruProfile? @relation(fields: [guruId], references: [id])
  kelompok      Kelompok     @relation(fields: [kelompokId], references: [id], onDelete: Cascade)
  siswa         SiswaProfile @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

model Setoran {
  id           String        @id @unique
  siswaId      String
  guruId       String
  tanggal      DateTime
  jenisSetoran JenisSetoran
  surahId      Int
  ayatMulai    Int
  ayatSelesai  Int
  adab         String?
  status       StatusSetoran
  catatan      String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  surah        Surah         @relation(fields: [surahId], references: [id])
  siswa        SiswaProfile  @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  guru         GuruProfile   @relation(fields: [guruId], references: [id])

  @@index([tanggal])
}

model Surah {
  id         Int       @id @default(autoincrement())
  nama       String    @unique
  jumlahAyat Int
  
  setoran    Setoran[]
  surahJuz   SurahJuz[]
}

model SurahJuz{
  id         Int       @id @default(autoincrement())
  juz        Int
  surahId    Int
  ayatAwal   Int
  ayatAkhir  Int

  surah Surah @relation(fields: [surahId], references: [id], onDelete: Cascade)

  @@index([juz])
}

enum Role {
  admin
  teacher
  student
}

enum JenisKelamin {
  LAKI_LAKI
  PEREMPUAN
}

enum GolonganDarah {
  A
  B
  AB
  O
}

enum StatusSetoran {
  LULUS
  TIDAK_LULUS
  MENGULANG
}

enum JenisSetoran {
  TAHFIDZ
  TAHSIN
}
