generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  password      String
  fullName      String
  role          Role

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  teacher       TeacherProfile?
  coordinator   CoordinatorProfile?
  student       StudentProfile?

  @@map("users")
}

model CoordinatorProfile {
  id              String        @id @unique
  userId          String        @unique
  nip             String        @unique

  birthDate       DateTime?
  birthPlace      String?
  gender          Gender?       @default(PILIH)
  bloodType       BloodType?    @default(PILIH)
  address         String?
  phoneNumber     String?
  email           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  examSchedules   ExamSchedule[]

  @@index([nip])
  @@map("coordinator_profiles")
}

model TeacherProfile {
  id              String        @id @unique
  userId          String        @unique
  nip             String        @unique

  birthDate       DateTime?
  birthPlace      String?
  gender          Gender?       @default(PILIH)
  bloodType       BloodType?    @default(PILIH)
  address         String?
  phoneNumber     String?
  email           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacherGroup    TeacherGroup[]
  groupHistory    GroupHistory[]
  submission      Submission[]
  examRequests    ExamRequest[]

  @@index([nip])
  @@map("teacher_profiles")
}

model StudentProfile {
  id              String        @id @unique
  userId          String        @unique
  nis             String        @unique
  classroomId     String?
  groupId         String?

  birthDate       DateTime?
  birthPlace      String?
  gender          Gender?       @default(PILIH)
  bloodType       BloodType?    @default(PILIH)
  address         String?
  phoneNumber     String?
  email           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  classroom           Classroom?            @relation(fields: [classroomId], references: [id])
  classroomHistory    ClassroomHistory[]
  group               Group?                @relation(fields: [groupId], references: [id])
  groupHistory        GroupHistory[]
  submission          Submission[]
  examRequests        ExamRequest[]

  @@index([nis])
  @@map("student_profiles")
}

model Classroom {
  id              String         @id @unique
  name            String
  academicYear    String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  classroomHistory    ClassroomHistory[]
  group               Group[]
  student             StudentProfile[]

  @@unique([name, academicYear])
  @@map("classrooms")
}

model ClassroomHistory {
  id              String            @id @default(uuid())
  studentId       String
  classroomId     String
  academicYear    String
  
  movedAt         DateTime          @default(now())

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  classroom       Classroom         @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student         StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("classroom_histories")
}

model TeacherGroup {
  id          String      @id @default(uuid())
  teacherId   String
  groupId     String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  
  teacher    TeacherProfile    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  group      Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("teacher_groups")
}

model Group {
  id              String      @id @unique
  name            String
  classroomId     String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  
  groupHistory      GroupHistory[]
  classroom         Classroom           @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  teacherGroup      TeacherGroup[]
  student           StudentProfile[]
  submission        Submission[]

  @@unique([name, classroomId])
  @@map("groups")
}

model GroupHistory {
  id              String       @id @default(uuid())
  groupId         String
  teacherId       String?
  studentId       String
  academicYear    String
  joinedAt        DateTime     @default(now())

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  group      Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  teacher    TeacherProfile?   @relation(fields: [teacherId], references: [id])
  student    StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("group_histories")
}

model Submission {
  id                  String              @id @unique
  studentId           String
  teacherId           String
  groupId             String

  date                DateTime
  submissionType      SubmissionType
  
  juzId               Int?
  surahId             Int?
  startVerse          Int?
  endVerse            Int?
  
  wafaId              Int?
  startPage           Int?
  endPage             Int? 
  
  adab                Adab
  submissionStatus    SubmissionStatus
  note                String?

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  
  surah     Surah?            @relation(fields: [surahId], references: [id])
  juz       Juz?              @relation(fields: [juzId], references: [id])
  wafa      Wafa?             @relation(fields: [wafaId], references: [id])
  group     Group             @relation(fields: [groupId], references: [id])
  teacher   TeacherProfile    @relation(fields: [teacherId], references: [id])
  student   StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([date])
  @@map("submissions")
}

model Surah {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  verseCount    Int
  
  surahJuz      SurahJuz[]
  submission    Submission[]
  examRequest   ExamRequest[]

  @@map("surah")
}

model SurahJuz {
  id            Int     @id @default(autoincrement())
  surahId       Int
  juzId         Int
  startVerse    Int
  endVerse      Int

  surah         Surah   @relation(fields: [surahId], references: [id], onDelete: Cascade)
  juz           Juz     @relation(fields: [juzId], references: [id], onDelete: Cascade)

  @@map("surah_juz")
}


model Juz {
  id          Int          @id
  name        String       

  surahJuz    SurahJuz[]
  submissions Submission[]
  examRequest   ExamRequest[]

  @@map("juz")
}

model Wafa {
  id      Int       @id @default(autoincrement())
  name    String    @unique

  submission        Submission[]

  @@map("wafa")
}

model ExamRequest {
  id            String           @id @default(uuid())
  studentId     String
  teacherId     String
  examType      ExamType        
  surahId       Int?           
  juzId         Int?            
  notes         String?
  status        ExamRequestStatus @default(MENUNGGU)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  student       StudentProfile  @relation(fields: [studentId], references: [id])
  teacher       TeacherProfile  @relation(fields: [teacherId], references: [id])
  surah         Surah?          @relation(fields: [surahId], references: [id])
  juz   Juz? @relation(fields: [juzId], references: [id])
  schedules     ScheduleRequest[]
  result        ExamResult[]

  @@map("exam_requests")
}


model ScheduleRequest {
  scheduleId   String
  requestId    String

  examSchedule ExamSchedule @relation(fields: [scheduleId], references: [id])
  examRequest  ExamRequest  @relation(fields: [requestId], references: [id])

  @@id([scheduleId, requestId])
  @@map("schedule_requests")
}

model ExamSchedule {
  id              String               @id @default(uuid())
  coordinatorId   String
  date            DateTime
  sessionName     String
  startTime       String
  endTime         String
  location        String

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  coordinator     CoordinatorProfile   @relation(fields: [coordinatorId], references: [id])
  schedules       ScheduleRequest[]
  result          ExamResult[]

  @@unique([date, sessionName, startTime, endTime, location])
  @@map("exam_schedules")
}

model ExamResult {
  id              String         @id @default(uuid())
  examScheduleId  String         
  examRequestId   String
  score           Int
  passed          Boolean
  notes           String?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  examSchedule    ExamSchedule   @relation(fields: [examScheduleId], references: [id])
  examRequest     ExamRequest    @relation(fields: [examRequestId], references: [id])

  @@unique([examScheduleId, examRequestId])
  @@map("exam_results")
}

enum Role {
  admin
  coordinator
  teacher
  student
}

enum Gender {
  PILIH
  LAKI_LAKI
  PEREMPUAN
}

enum BloodType {
  PILIH
  A
  B
  AB
  O
}

enum SubmissionStatus {
  LULUS
  TIDAK_LULUS
  MENGULANG
}

enum SubmissionType {
  TAHFIDZ
  TAHSIN_WAFA
  TAHSIN_ALQURAN
}

enum Adab{
  BAIK
  KURANG_BAIK
  TIDAK_BAIK
}

enum ExamType {
  SURAH
  JUZ
}

enum ExamRequestStatus {
  MENUNGGU
  DITERIMA
  DITOLAK
  SELESAI
}
