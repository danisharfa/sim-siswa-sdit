generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String
  fullName String
  role     Role

  email       String?
  phoneNumber String?
  birthDate   DateTime?
  birthPlace  String?
  gender      Gender?    @default(PILIH)
  bloodType   BloodType? @default(PILIH)
  address     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher     TeacherProfile?
  coordinator CoordinatorProfile?
  student     StudentProfile?

  @@map("users")
}

model CoordinatorProfile {
  userId String @id
  nip    String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  handledTashihRequests        TashihRequest[]
  scheduledTashihSchedules     TashihSchedule[]
  evaluatedTashihResults       TashihResult[]
  handledMunaqasyahRequests    MunaqasyahRequest[]
  scheduledMunaqasyahSchedules MunaqasyahSchedule[]

  @@index([nip])
  @@map("coordinator_profiles")
}

model TeacherProfile {
  userId String @id
  nip    String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups              Group[]
  groupHistories      GroupHistory[]
  submissions         Submission[]
  tashihRequests      TashihRequest[]
  weeklyTargets       WeeklyTarget[]
  munaqasyahRequests  MunaqasyahRequest[]  @relation("MunaqasyahTeacher")
  munaqasyahSchedules MunaqasyahSchedule[] @relation("MunaqasyahExaminer")

  @@index([nip])
  @@map("teacher_profiles")
}

model StudentProfile {
  userId      String  @id
  nis         String  @unique
  nisn        String? @unique
  classroomId String?
  groupId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status      StudentStatus @default(AKTIF)
  graduatedAt DateTime?

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  classroom          Classroom?         @relation(fields: [classroomId], references: [id])
  classroomHistories ClassroomHistory[]
  group              Group?             @relation(fields: [groupId], references: [id])
  groupHistories     GroupHistory[]

  submissions    Submission[]
  homeActivities HomeActivity[]
  weeklyTargets  WeeklyTarget[]

  tashihRequests     TashihRequest[]
  munaqasyahRequests MunaqasyahRequest[] @relation("MunaqasyahStudent")

  tahfidzScores         TahfidzScore[]
  tahsinScores          TahsinScore[]
  Report                Report[]
  MunaqasyahFinalResult MunaqasyahFinalResult[]

  @@index([nis])
  @@map("student_profiles")
}

model AcademicSetting {
  id                   String   @id
  currentYear          String
  currentSemester      Semester
  currentPrincipalName String
  schoolName           String
  schoolAddress        String
  updatedAt            DateTime @updatedAt
  createdAt            DateTime @default(now())

  @@map("academic_settings")
}

model Classroom {
  id           String   @id @unique
  name         String
  academicYear String
  semester     Semester
  isActive     Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classroomHistories ClassroomHistory[]
  groups             Group[]
  students           StudentProfile[]

  @@unique([name, academicYear, semester])
  @@map("classrooms")
}

model ClassroomHistory {
  id           String   @id @default(uuid())
  studentId    String
  classroomId  String
  academicYear String
  semester     Semester

  movedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classroom Classroom      @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student   StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([studentId, academicYear, semester])
  @@map("classroom_histories")
}

model Group {
  id          String @id @unique
  name        String
  classroomId String
  teacherId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupHistories GroupHistory[]
  classroom      Classroom        @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  teacher        TeacherProfile   @relation(fields: [teacherId], references: [userId])
  students       StudentProfile[]

  submissions    Submission[]
  homeActivities HomeActivity[]
  weeklyTargets  WeeklyTarget[]

  tashihRequests     TashihRequest[]
  munaqasyahRequests MunaqasyahRequest[]

  TahfidzScore          TahfidzScore[]
  TahsinScore           TahsinScore[]
  Report                Report[]
  MunaqasyahFinalResult MunaqasyahFinalResult[]

  @@unique([name, classroomId])
  @@map("groups")
}

model GroupHistory {
  id           String   @id @default(uuid())
  teacherId    String?
  studentId    String
  groupId      String
  academicYear String
  semester     Semester

  joinedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  teacher TeacherProfile? @relation(fields: [teacherId], references: [userId])
  student StudentProfile  @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([studentId, academicYear, semester])
  @@map("group_histories")
}

model Submission {
  id        String @id @unique
  studentId String
  teacherId String
  groupId   String

  date           DateTime
  submissionType SubmissionType

  juzId      Int?
  surahId    Int?
  startVerse Int?
  endVerse   Int?

  wafaId    Int?
  startPage Int?
  endPage   Int?

  adab             Adab
  submissionStatus SubmissionStatus
  note             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  teacher TeacherProfile @relation(fields: [teacherId], references: [userId])
  group   Group          @relation(fields: [groupId], references: [id])
  juz     Juz?           @relation(fields: [juzId], references: [id])
  surah   Surah?         @relation(fields: [surahId], references: [id])
  wafa    Wafa?          @relation(fields: [wafaId], references: [id])

  @@index([date])
  @@map("submissions")
}

model HomeActivity {
  id        String @id @default(uuid())
  studentId String
  groupId   String

  date         DateTime
  activityType HomeActivityType

  juzId      Int
  surahId    Int
  startVerse Int
  endVerse   Int
  note       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group   Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  juz     Juz            @relation(fields: [juzId], references: [id])
  surah   Surah          @relation(fields: [surahId], references: [id])

  @@index([date])
  @@map("home_activities")
}

model WeeklyTarget {
  id        String @id @default(uuid())
  studentId String
  teacherId String
  groupId   String

  type            SubmissionType
  startDate       DateTime
  endDate         DateTime
  description     String
  status          TargetStatus   @default(TIDAK_TERCAPAI)
  progressPercent Int?           @default(0)

  surahStartId Int?
  surahEndId   Int?
  startAyat    Int?
  endAyat      Int?

  wafaId    Int?
  startPage Int?
  endPage   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    StudentProfile @relation(fields: [studentId], references: [userId])
  teacher    TeacherProfile @relation(fields: [teacherId], references: [userId])
  group      Group          @relation(fields: [groupId], references: [id])
  surahStart Surah?         @relation("StartSurah", fields: [surahStartId], references: [id])
  surahEnd   Surah?         @relation("EndSurah", fields: [surahEndId], references: [id])
  wafa       Wafa?          @relation(fields: [wafaId], references: [id])

  @@map("weekly_targets")
}

model Surah {
  id         Int    @id
  name       String @unique
  verseCount Int

  surahJuz           SurahJuz[]
  submissions        Submission[]
  homeActivities     HomeActivity[]
  tashihRequests     TashihRequest[]
  tahfidzScores      TahfidzScore[]
  weeklyTargetsStart WeeklyTarget[]  @relation("StartSurah")
  weeklyTargetsEnd   WeeklyTarget[]  @relation("EndSurah")

  @@map("surah")
}

model SurahJuz {
  id         Int @id
  surahId    Int
  juzId      Int
  startVerse Int
  endVerse   Int

  surah Surah @relation(fields: [surahId], references: [id], onDelete: Cascade)
  juz   Juz   @relation(fields: [juzId], references: [id], onDelete: Cascade)

  @@map("surah_juz")
}

model Juz {
  id   Int    @id
  name String

  surahJuz              SurahJuz[]
  submissions           Submission[]
  homeActivities        HomeActivity[]
  tashihRequests        TashihRequest[]
  munaqasyahRequests    MunaqasyahRequest[]
  MunaqasyahFinalResult MunaqasyahFinalResult[]

  @@map("juz")
}

model Wafa {
  id        Int    @id
  name      String @unique
  pageCount Int?

  submissions    Submission[]
  tashihRequests TashihRequest[]
  weeklyTargets  WeeklyTarget[]

  @@map("wafa")
}

// Tashih models
model TashihRequest {
  id        String @id @default(uuid())
  studentId String
  teacherId String
  groupId   String

  tashihType TashihType
  juzId      Int?
  surahId    Int?
  wafaId     Int?
  startPage  Int?
  endPage    Int?
  status     TashihRequestStatus @default(MENUNGGU)
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  handledByCoordinatorId String?
  handledByCoordinator   CoordinatorProfile? @relation(fields: [handledByCoordinatorId], references: [userId])

  student   StudentProfile          @relation(fields: [studentId], references: [userId])
  teacher   TeacherProfile          @relation(fields: [teacherId], references: [userId])
  group     Group                   @relation(fields: [groupId], references: [id])
  juz       Juz?                    @relation(fields: [juzId], references: [id])
  surah     Surah?                  @relation(fields: [surahId], references: [id])
  wafa      Wafa?                   @relation(fields: [wafaId], references: [id])
  schedules TashihScheduleRequest[]
  results   TashihResult[]

  @@map("tashih_requests")
}

model TashihScheduleRequest {
  scheduleId String
  requestId  String

  tashihSchedule TashihSchedule @relation(fields: [scheduleId], references: [id])
  tashihRequest  TashihRequest  @relation(fields: [requestId], references: [id])

  @@id([scheduleId, requestId])
  @@map("tashih_schedule_requests")
}

model TashihSchedule {
  id          String   @id @default(uuid())
  date        DateTime
  sessionName String
  startTime   String
  endTime     String
  location    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledByCoordinatorId String
  scheduledByCoordinator   CoordinatorProfile @relation(fields: [scheduledByCoordinatorId], references: [userId])

  schedules TashihScheduleRequest[]
  results   TashihResult[]

  @@unique([date, sessionName, startTime, endTime, location])
  @@map("tashih_schedules")
}

model TashihResult {
  id         String  @id @default(uuid())
  scheduleId String
  requestId  String
  passed     Boolean
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  evaluatedByCoordinatorId String
  evaluatedByCoordinator   CoordinatorProfile? @relation(fields: [evaluatedByCoordinatorId], references: [userId])

  tashihSchedule TashihSchedule @relation(fields: [scheduleId], references: [id])
  tashihRequest  TashihRequest  @relation(fields: [requestId], references: [id])

  @@unique([scheduleId, requestId])
  @@map("tashih_results")
}

// Score models
model TahfidzScore {
  id           String      @id @default(uuid())
  studentId    String
  groupId      String
  surahId      Int
  scoreNumeric Int
  scoreLetter  GradeLetter
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group   Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  surah   Surah          @relation(fields: [surahId], references: [id])

  @@unique([studentId, groupId, surahId])
  @@map("tahfidz_scores")
}

model TahsinScore {
  id         String     @id @default(uuid())
  studentId  String
  groupId    String
  tahsinType TahsinType

  topic        String
  scoreNumeric Int
  scoreLetter  GradeLetter
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group   Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([studentId, groupId, tahsinType, topic])
  @@map("tahsin_scores")
}

model Report {
  id           String   @id @default(uuid())
  studentId    String
  groupId      String
  academicYear String
  semester     Semester

  tahfidzScore       Float?
  tahsinScore        Float?
  lastTahsinMaterial String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group   Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([studentId, groupId, academicYear, semester])
  @@map("reports")
}

// Munaqasyah models
model MunaqasyahRequest {
  id        String @id @default(uuid())
  studentId String
  teacherId String
  groupId   String

  batch  MunaqasyahBatch
  stage  MunaqasyahStage
  juzId  Int
  status MunaqasyahRequestStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  handledByCoordinatorId String?
  handledByCoordinator   CoordinatorProfile? @relation(fields: [handledByCoordinatorId], references: [userId])

  student          StudentProfile              @relation("MunaqasyahStudent", fields: [studentId], references: [userId])
  teacher          TeacherProfile              @relation("MunaqasyahTeacher", fields: [teacherId], references: [userId])
  group            Group                       @relation(fields: [groupId], references: [id])
  juz              Juz                         @relation(fields: [juzId], references: [id])
  scheduleRequests MunaqasyahScheduleRequest[]
  results          MunaqasyahResult[]

  @@map("munaqasyah_requests")
}

model MunaqasyahScheduleRequest {
  id         String @id @default(uuid())
  scheduleId String
  requestId  String

  schedule MunaqasyahSchedule @relation(fields: [scheduleId], references: [id])
  request  MunaqasyahRequest  @relation(fields: [requestId], references: [id])

  @@map("munaqasyah_schedule_requests")
}

model MunaqasyahSchedule {
  id          String   @id @default(uuid())
  date        DateTime
  sessionName String
  startTime   String
  endTime     String
  location    String
  examinerId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledByCoordinatorId String?
  scheduledByCoordinator   CoordinatorProfile? @relation(fields: [scheduledByCoordinatorId], references: [userId])

  examiner         TeacherProfile?             @relation("MunaqasyahExaminer", fields: [examinerId], references: [userId])
  scheduleRequests MunaqasyahScheduleRequest[]
  results          MunaqasyahResult[]

  @@map("munaqasyah_schedules")
}

model MunaqasyahResult {
  id         String          @id @default(uuid())
  requestId  String
  scheduleId String
  grade      MunaqasyahGrade
  passed     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  request         MunaqasyahRequest  @relation(fields: [requestId], references: [id])
  schedule        MunaqasyahSchedule @relation(fields: [scheduleId], references: [id])
  tasmiScore      TasmiScore?
  munaqasyahScore MunaqasyahScore?

  tasmiForFinal      MunaqasyahFinalResult? @relation("TasmiResult")
  munaqasyahForFinal MunaqasyahFinalResult? @relation("MunaqasyahResult")

  @@unique([requestId, scheduleId])
  @@map("munaqasyah_results")
}

model TasmiScore {
  id         String  @id @default(uuid())
  tajwid     Int
  kelancaran Int
  adab       Int
  note       String?
  totalScore Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result   MunaqasyahResult @relation(fields: [resultId], references: [id])
  resultId String           @unique

  @@map("tasmi_scores")
}

model MunaqasyahScore {
  id         String  @id @default(uuid())
  tajwid     Int
  kelancaran Int
  adab       Int
  note       String?
  totalScore Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result   MunaqasyahResult @relation(fields: [resultId], references: [id])
  resultId String           @unique

  @@map("munaqasyah_scores")
}

model MunaqasyahFinalResult {
  id        String          @id @default(uuid())
  studentId String
  groupId   String
  juzId     Int
  batch     MunaqasyahBatch

  // Reference ke hasil individual
  tasmiResultId      String @unique
  munaqasyahResultId String @unique

  // Hasil akhir (weighted average: 60% TASMI + 40% MUNAQASYAH)
  finalScore Float
  finalGrade MunaqasyahGrade
  passed     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student          StudentProfile   @relation(fields: [studentId], references: [userId])
  group            Group            @relation(fields: [groupId], references: [id])
  juz              Juz              @relation(fields: [juzId], references: [id])
  tasmiResult      MunaqasyahResult @relation("TasmiResult", fields: [tasmiResultId], references: [id])
  munaqasyahResult MunaqasyahResult @relation("MunaqasyahResult", fields: [munaqasyahResultId], references: [id])

  @@unique([studentId, juzId, batch])
  @@map("munaqasyah_final_results")
}

// Enums
enum Role {
  admin
  coordinator
  teacher
  student
}

enum Gender {
  PILIH
  LAKI_LAKI
  PEREMPUAN
}

enum BloodType {
  PILIH
  A
  B
  AB
  O
}

enum StudentStatus {
  AKTIF
  LULUS
  PINDAH
  KELUAR
}

enum Semester {
  GANJIL
  GENAP
}

enum SubmissionStatus {
  LULUS
  TIDAK_LULUS
  MENGULANG
}

enum SubmissionType {
  TAHFIDZ
  TAHSIN_WAFA
  TAHSIN_ALQURAN
}

enum Adab {
  BAIK
  KURANG_BAIK
  TIDAK_BAIK
}

enum HomeActivityType {
  MURAJAAH
  TILAWAH
  TARJAMAH
}

enum TashihType {
  ALQURAN
  WAFA
}

enum TashihRequestStatus {
  MENUNGGU
  DITERIMA
  DITOLAK
  SELESAI
}

enum GradeLetter {
  A // 92–100 (Sangat Baik)
  B // 83–91 (Baik)
  C // 75–82 (Cukup)
  D // <75 (Kurang)
}

enum TahsinType {
  WAFA
  ALQURAN
}

enum TargetStatus {
  TIDAK_TERCAPAI
  TERCAPAI
}

enum MunaqasyahBatch {
  TAHAP_1
  TAHAP_2
  TAHAP_3
  TAHAP_4
}

enum MunaqasyahStage {
  TASMI
  MUNAQASYAH
}

enum MunaqasyahRequestStatus {
  MENUNGGU
  DITERIMA
  DITOLAK
  SELESAI
}

enum MunaqasyahGrade {
  MUMTAZ // 91–100
  JAYYID_JIDDAN // 85–90
  JAYYID // 80–84
  TIDAK_LULUS // <80
}
